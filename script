```python
import re

def extract_action_items(text):
    action_items = []
    sentences = re.split(r'(?<!\w\.\w.)(?<![A-Z][a-z]\.)(?<=\.|\?)\s', text)
    
    action_phrases = ["please", "Can you", "Do you", "you're needed"]
    
    for sentence in sentences:
        for phrase in action_phrases:
            if phrase in sentence:
                action_items.append(sentence)
                break
    
    return action_items

def extract_information(action_items):
    extracted_info = []
    
    for item in action_items:
        # Extract relevant information such as requests, objectives, deadlines, and events
        # Implement your logic here to extract the required information
        
        extracted_info.append({
            "action_item": item,
            "request": "Sample request",
            "objective": "Sample objective",
            "deadline": "Sample deadline",
            "event": "Sample event"
        })
    
    return extracted_info

def create_schedule(extracted_info):
    # Select an appropriate app or platform to create a schedule or reminder
    # Implement your logic here to create a schedule
    
    schedule = "Sample schedule created"
    
    return schedule

def set_reminders(schedule, intervals):
    # Implement alerts to remind users at specified intervals until tasks are completed
    # Implement your logic here to set reminders
    
    reminders = "Reminders set at specified intervals"
    
    return reminders

# Main function to process the text and generate schedule and reminders
def process_text(text, intervals):
    action_items = extract_action_items(text)
    extracted_info = extract_information(action_items)
    schedule = create_schedule(extracted_info)
    reminders = set_reminders(schedule, intervals)
    
    return reminders

# Example usage
text = '''
Develop an AI assistant with features that capture real-time messages and conversations through audio recording and text analysis. Utilize regex to identify sentences containing "action items" phrases (e.g., sentences that include "[your name], please...", "Can you...", "Do you...", "you're needed..."). Extract relevant information such as requests, objectives, deadlines, and events, categorize using templates, and select an appropriate app or platform to create a schedule or reminder. Implement alerts to remind users at specified intervals until tasks are completed.
'''

intervals = [30, 60, 120]  # Specify reminder intervals in minutes

reminders = process_text(text, intervals)
print(reminders)
```